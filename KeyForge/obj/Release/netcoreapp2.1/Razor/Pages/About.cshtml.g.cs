#pragma checksum "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\About.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1258fc412f70279fb594e3d250cb0f227b75521c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(KeyForge.Pages.Pages_About), @"mvc.1.0.razor-page", @"/Pages/About.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.RazorPageAttribute(@"/Pages/About.cshtml", typeof(KeyForge.Pages.Pages_About), null)]
namespace KeyForge.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#line 2 "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\_ViewImports.cshtml"
using KeyForge;

#line default
#line hidden
#line 3 "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\_ViewImports.cshtml"
using KeyForge.Data;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1258fc412f70279fb594e3d250cb0f227b75521c", @"/Pages/About.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3c1b6ffb86ea270d2bb2b4d89c42ed3f45ff9daf", @"/Pages/_ViewImports.cshtml")]
    public class Pages_About : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 3 "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\About.cshtml"
  
    ViewData["Title"] = "O managerze";

#line default
#line hidden
            BeginContext(124, 25, true);
            WriteLiteral("<!DOCTYPE html>\r\n<html>\r\n");
            EndContext();
            BeginContext(149, 15, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bea96267d1934a81a6f4223255bbb1b4", async() => {
                BeginContext(155, 2, true);
                WriteLiteral("\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(164, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(166, 3965, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "d64071097e9445e0949f0be1e010631e", async() => {
                BeginContext(172, 10, true);
                WriteLiteral("\r\n    <h2>");
                EndContext();
                BeginContext(183, 17, false);
#line 12 "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\About.cshtml"
   Write(ViewData["Title"]);

#line default
#line hidden
                EndContext();
                BeginContext(200, 1769, true);
                WriteLiteral(@"</h2>

    <h3>Jak to działa?</h3>
    <p>
        Grając w dowolnym formacie (turniej zorganizowany / przypadkowa rozgrywka) w GOSU oraz w Drafcie,<br />
        należy zgłosić wynik osobom zarządzającym danym miejscem.<br />
        Wynik liczyć się będzie do rankingu aktualnie rozgrywanego turnieju sezonowego.<br />
        Pierwsza rozgrywka, w danym turnieju, wymaga zarejestrowania się poprzez zeskanowanie kodu QR, który jest przypisany do Twojego konta Keyforge.<br />
        Ranking obliczany jest zgodnie z mELO (więcej poniżej).
    </p>

    <h3>Czym jest mELO?</h3>
    <p>
        ELO to system punktacji początkowo wykorzystywany przez szachistów.
        W skrócie, dla każdej partii obliczane jest prawdopodobieństwo zwycięstwa i przegranej każdego gracza,<br />
        w parze ze współczynnikiem, który odpowiada za dynamiczność zmian rankingu, uzyskujemy system, który pozwala na zachowanie równowagi rozgrywek graczy dobrych i słabych.<br />
        Punkty przyznane słabemu graczowi,");
                WriteLiteral(@" który wygrał z graczem dobrym (na bazie aktualnego rankingu) są skrajnie wyższe niż jeżeli wygrałby gracz dobry. <br />
        Więcej o rankingu ELO można poczytać <a href=""https://en.wikipedia.org/wiki/Elo_rating_system"">tutaj</a>. <br /><br /> 
        mELO to modyfikacja wprowadzona na potrzeby ligi - zwycięzca, poza punktami, które dostałby w ramach meczu, dostaje dodatkowo 10% bonusu od tych punktów. <br />
    </p>

    <h3>Uwagi / awarie / błędy</h3>
    <p>
        Serwis tworzony jest amatorsko i wolontaryjnie ""od fana dla fanów"" - jeżeli znajdziesz błąd lub masz cenną uwagę, która mogłaby popawić funkcjonowanie serwisu - <br />
        zapraszam do <a href=""mailto: jedrzej.peziak@wp.pl"">kontaktu</a>.
    </p>


");
                EndContext();
#line 40 "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\About.cshtml"
     if (SignInManager.IsSignedIn(User))
    {

#line default
#line hidden
                BeginContext(2018, 2099, true);
                WriteLiteral(@"        <h3>Dla organizatorów</h3>
        <p>
            1. Dodaj turniej <br />
            &nbsp;&nbsp;&nbsp;&nbsp; a. Turniej prywatny nie pozwala innym na przesyłanie wyników rozgrywek. Jest natomiast możliwa rejestracja na taki turniej. <br />
            &nbsp;&nbsp;&nbsp;&nbsp; b. Wszystkie turnieje są widoczne dla wszystkich organizatorów oraz graczy. <br />
            &nbsp;&nbsp;&nbsp;&nbsp; c. Zwiększenie wartości współczynnika ELO powoduje zwiększenie dynamiki zmian na tabeli wyników. <br />
            2. Wyślij wyniki <br />
            &nbsp;&nbsp;&nbsp;&nbsp; a. Należy określić na jaki turniej mają być przesłane wyniki. <br />
            &nbsp;&nbsp;&nbsp;&nbsp; b. Jeżeli turniej nie jest widoczny, upewnij się, że jego data końca nie została osiągnięta. Można ją zmienić w edycji turnieju. <br />
            &nbsp;&nbsp;&nbsp;&nbsp; c. Jeżeli turniej nie jest widoczny, a nie jesteś jego organizatorem - dołącz do niego na stronie przeglądu turniejów. <br />
            &nbsp;&nbsp;");
                WriteLiteral(@"&nbsp;&nbsp; d. Wysyłanie wyników jest możliwe w dwóch opcjach: pojedyncze oraz masowe. <br />
            &nbsp;&nbsp;&nbsp;&nbsp; e. Przesyłanie pojedyncze może odbywać się poprzez odczytanie kodu QR obu graczy lub wybraniu ich z listy (jeżeli wcześniej brali udział w danym turnieju). <br />
            &nbsp;&nbsp;&nbsp;&nbsp; f. Przesyłanie masowe wymaga wcześniejszej rejestracji graczy na dany turniej <br />
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(można to wykonać poprzez osobny formualarz ""Rejestracja gracza"", gdzie odbywa się skanowanie jednego kodu QR). <br />
            3. Określ zwycięzców <br />
            &nbsp;&nbsp;&nbsp;&nbsp; a. Dla każdego turnieju prowadzona jest osobna tabela wyników. <br />
            &nbsp;&nbsp;&nbsp;&nbsp; b. Do turnieju można dostać się poprzez stronę przeglądu wszystkich turniejów. <br />

            <br />
            Uwagi: <br />
            - Adres i nazwa firmy są widoczne dla osób, które przeglądają turnieje, jako informa");
                WriteLiteral("cja, gdzie odbywa się wydarzenie.\r\n\r\n        </p>\r\n");
                EndContext();
#line 65 "C:\Users\jedrz\Desktop\KeyForge\KeyForge\KeyForge\Pages\About.cshtml"
    }

#line default
#line hidden
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(4131, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public SignInManager<IdentityUser> SignInManager { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<AboutModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AboutModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<AboutModel>)PageContext?.ViewData;
        public AboutModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
